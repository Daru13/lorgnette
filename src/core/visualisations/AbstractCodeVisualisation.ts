import { Pattern } from "../code-patterns/Pattern";
import { Range } from "../documents/Range";
import { InputMapping } from "../mappings/InputMapping";
import { OutputMapping } from "../mappings/OutputMapping";
import { Site } from "../sites/Site";
import { UserInterface, UserInterfaceInput, UserInterfaceOutput } from "../user-interfaces/UserInterface";
import { CodeVisualisationProvider } from "./CodeVisualisationProvider";
import { CodeVisualisationType } from "./CodeVisualisationType";
import { Document } from "../documents/Document";

export abstract class AbstractCodeVisualisation<
    T extends CodeVisualisationType,
    // S = NonNullable<ReturnType<SiteProvider<T>["provideForPattern"]>>
> {
    readonly provider: CodeVisualisationProvider<T>;
    
    abstract get document(): Document;
    abstract get range(): Range;
    abstract get pattern(): Pattern<T>;
    abstract get sites(): Site<T>[];

    abstract get inputMapping(): InputMapping<T>;
    abstract get outputMapping(): OutputMapping<T> | null;
    abstract get userInterface(): UserInterface;

    constructor(provider: CodeVisualisationProvider<T>) {
        this.provider = provider;
    }

    protected initialise(): void {
        this.initialiseUserInterface();
    }

    protected initialiseUserInterface(): void {
        // Add a model change observer to react to changes in the UI
        this.userInterface.addModelChangeObserver({
            processChange: (modelOutput: UserInterfaceOutput) => {
                this.applyOutputMapping(modelOutput);
            }
        });

        // Initialise the UI with the value generated by the input mapping
        const userInterfaceInput = this.applyInputMapping();
        this.userInterface.updateModel(userInterfaceInput);
    }

    applyInputMapping(): UserInterfaceInput {
        return this.inputMapping.mapToInput(this.document, this.pattern, this.sites);
    }

    applyOutputMapping(output: UserInterfaceOutput): void {
        if (this.outputMapping) {
            this.outputMapping.processOutput(output, this.document, this.pattern, this.sites);
        }
    }
}
